<main class="flex-shrink-0">
    <div class="container">
        <h2 class="border-1 border-bottom border-dark">
            The Code for Loan Shark MVC is structured in 4 (6) function. The view and both models are also included.
        </h2>
        <div id="accordionItemOne" class="accordion mt-2">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelOne"
                            aria-expanded="true"
                            aria-controls="accordionPanelOne"
                            class="accordion-button bg-primary text-light">
                        GetPayments()
                    </button>
                </h3>
                <div id="accordionPanelOne"
                     class="accordion-collapse collapse show">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="1"><code class="language-dotnet">
                                    public static LoanModel GetPayments(LoanModel loan)
                                    {
                                        loan.LoanPayment = CalculateMonthlyPayment(loan.LoanAmount, loan.LoanInterest, loan.LoanTerm);

                                        var balance = loan.LoanAmount;
                                        var totalInterest = 0.0m;
                                        var monthlyInterestAmount = 0.0m;
                                        var monthlyPrincipal = 0.0m;
                                        var monthlyInterestRate = CalculateMonthlyInterest(loan.LoanInterest);

                                        for (int month = 1; month <= loan.LoanTerm; month++)
                                        {
                                            monthlyInterestAmount = CalculateMonthlyInterestAmount(balance, monthlyInterestRate);
                                            totalInterest += monthlyInterestAmount;
                                            monthlyPrincipal = loan.LoanPayment - monthlyInterestAmount;
                                            balance -= monthlyPrincipal;

                                            LoanPaymentModel loanPayment = new();

                                            loanPayment.Month = month;
                                            loanPayment.Payment = loan.LoanPayment;
                                            loanPayment.MonthlyPrincipal = monthlyPrincipal;
                                            loanPayment.MonthlyInterest = monthlyInterestAmount;
                                            loanPayment.TotalInterest = totalInterest;
                                            loanPayment.Balance = balance;

                                            loan.LoanPayments.Add(loanPayment);
                                        }

                                        loan.TotalInterest = totalInterest;
                                        loan.TotalCost = loan.LoanAmount + totalInterest;

                                        return loan;
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>GetPayments()</h5>
                                <p>
                                    Here we do most of the work, starting with taking in the loan model as a parameter.
                                </p>
                                <p>
                                    The first thing we do inside the function is to assign a monthly loan payment to the model, the calculation is done in it's own function beclow.
                                </p>
                                <p>
                                    Next we declare some variables and assign some default values to them. We'll use these inside the following loop.
                                </p>
                                <p>
                                    Next up is the work horse of the function, the for-loop. It will start at the first month and will keep going for as long as it is equal to the loan term, iterating by 1 each time.
                                </p>
                                <p>
                                    Inside the loop we assign the monthly interest amount, which is calculated in it's own function, to the monthlyInterestAmount variable. We also append (+=) this amount to the totalInterest variable.
                                </p>
                                <p>
                                    Next we assign the result of the loan payment - monthly interest amount to the monthlyPrincipal variable and subtract (-=) the monthly principal from the balance.
                                </p>
                                <p>
                                    Now we instantiate a new object from the LoanPaymentModel and we assign each variable to this new object.
                                </p>
                                <p>
                                    Finally for the loop-portion, we'll add the loanPayment to the LoanPayments list of the loan object.
                                </p>
                                <p>
                                    Finally we'll assign the total interest to the TotalInterest of the loan object, assign the loan amount + total interest to the TotalCost of the loan object. The last thing we'll do is to return the loan object.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemTwo" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelTwo"
                            aria-expanded="true"
                            aria-controls="accordionPanelTwo"
                            class="accordion-button bg-primary text-light">
                        CalculateMonthlyPayment()
                    </button>
                </h3>
                <div id="accordionPanelTwo" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    private static decimal CalculateMonthlyPayment(decimal loanAmount, decimal loanInterest, int loanTerm)
                                    {
                                        decimal monthlyLoanInterest = CalculateMonthlyInterest(loanInterest);

                                        double rateDouble = Convert.ToDouble(monthlyLoanInterest);
                                        double amountDouble = Convert.ToDouble(loanAmount);

                                        double paymentDouble = (amountDouble * rateDouble) / (1 - Math.Pow(1 + rateDouble, -loanTerm));

                                        return Convert.ToDecimal(paymentDouble);
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>CalculateMonthlyPayment()</h5>
                                <p>
                                    Here we take in the loan amount, the loan interest and the loan term, all as decimals, and we return a new decimal.
                                </p>
                                <p>
                                    First off we assign to a new variable, the monthly loan interest, which will be calculated by one of the following functions.
                                </p>
                                <p>
                                    Next we have to doncert the monthly interest and loan amount to doubles, this is because the Math library we'll use for the payment calculation works with the double type. An int will work easily since it's a whole number, but the decimals will need to be converted.
                                </p>
                                <p>
                                    Finally we return the payment which is converted back to a decimal.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemThree" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelThree"
                            aria-expanded="true"
                            aria-controls="accordionPanelThree"
                            class="accordion-button bg-primary text-light">
                        CalculateMonthlyInterest()
                    </button>
                </h3>
                <div id="accordionPanelThree" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    private static decimal CalculateMonthlyInterest(decimal loanInterest)
                                    {
                                        return loanInterest / 1200;
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>CalculateMonthlyInterest()</h5>
                                <p>
                                    Here we take in the loan's interest rate as a decimal, and return a new decimal.
                                </p>
                                <p>
                                    For the actual calculation, we return the loan interest rate divided by 1200 (100% * 12 months) in order to get the monthly interest.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemFour" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelFour"
                            aria-expanded="true"
                            aria-controls="accordionPanelFour"
                            class="accordion-button bg-primary text-light">
                        CalculateMonthlyInterestAmount()
                    </button>
                </h3>
                <div id="accordionPanelFour" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    private static decimal CalculateMonthlyInterestAmount(decimal balance, decimal monthlyInterestRate)
                                    {
                                        return balance * monthlyInterestRate;
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>CalculateMonthlyInterestAmount()</h5>
                                <p>
                                    Here we take in the balance and monthly interest rate decimals, and return a new decimal.
                                </p>
                                <p>
                                    This function's sole job is to calculate the amount of interest payed per month by multiplying the current balance by the monthly interest rate and returning it to the view
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemFive" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelFive"
                            aria-expanded="true"
                            aria-controls="accordionPanelFive"
                            class="accordion-button bg-primary text-light">
                        App // HttpGet
                    </button>
                </h3>
                <div id="accordionPanelFive" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    [HttpGet]
                                    public IActionResult App()
                                    {
                                        LoanModel loan = new();

                                        loan.LoanPayment = 0.0m;
                                        loan.TotalInterest = 0.0m;
                                        loan.TotalCost = 0.0m;
                                        loan.LoanInterest = 3.5m;
                                        loan.LoanAmount = 15000m;
                                        loan.LoanTerm = 60;

                                        return View(loan);
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>App // GET</h5>
                                <p>
                                    The controller's "get" action of the App() function instantiates a new version of the LoanModel.
                                </p>
                                <p>
                                    We assign default values to the loan object and then return the object to the view.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemSix" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelSix"
                            aria-expanded="true"
                            aria-controls="accordionPanelSix"
                            class="accordion-button bg-primary text-light">
                        App() // HttpPost
                    </button>
                </h3>
                <div id="accordionPanelSix" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    [HttpPost]
                                    [AutoValidateAntiforgeryToken]
                                    public IActionResult App(LoanModel loan)
                                    {
                                        LoanModel output = LoanCalculator.GetPayments(loan);

                                        return View(output);
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>App // POST</h5>
                                <p>
                                    The controller's "post" action of the App() method takes in the loan object we instantiated before.
                                </p>
                                <p>
                                    We create a new empty loan object and assign the returned object from the GetPayments() function to it. GetPayments() takes in the original loan object as a parameter for us to work with.
                                </p>
                                <p>
                                    Finally we return the object to the view.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemSeven" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelSeven"
                            aria-expanded="true"
                            aria-controls="accordionPanelSeven"
                            class="accordion-button bg-primary text-light">
                        App view
                    </button>
                </h3>
                <div id="accordionPanelSeven" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    &lt;form asp-controller="Home" asp-action="App" method="post" class="row">
                                        &lt;div class="col-4 p-3 border border-black d-flex flex-column">
                                            &lt;div class="d-xl-flex mb-3">
                                                &lt;label asp-for="LoanAmount" class="form-label col-xl-4">Amount ($):&lt;/label>
                                                &lt;input asp-for="LoanAmount" type="number" value="@@Model.LoanAmount" class="form-control col" />
                                            &lt;/div>
                                            &lt;div class="d-xl-flex mb-3">
                                                &lt;label asp-for="LoanTerm" class="form-label col-xl-4">Term (months):&lt;/label>
                                                &lt;input asp-for="LoanTerm" type="number" value="@@Model.LoanTerm" class="form-control col" />
                                            &lt;/div>
                                            &lt;div class="d-xl-flex mb-2">
                                                &lt;label asp-for="LoanInterest" class="form-label col-xl-4">Interest (%):&lt;/label>
                                                &lt;input asp-for="LoanInterest" type="number" value="@@Model.LoanInterest" class="form-control col" />
                                            &lt;/div>
                                            &lt;div class="text-end mt-auto mt-xl-auto">
                                                &lt;button id="csBtnSubmit" type="submit" class="btn btn-primary btn-lg">
                                                Calculate Loan
                                                &lt;/button>
                                            &lt;/div>
                                        &lt;/div>
                                        &lt;div class="col-8 p-3 border border-black">
                                            &lt;h2 class="text-center border-bottom border-black">
                                                Your Monthly Payment
                                            &lt;/h2>
                                            &lt;div id="csDisplayHeader" class="row">
                                                &lt;div class="col-12">
                                                    &lt;div class="mt-5">
                                                    &lt;h3 id="csMonthlyPayment" class="display-5 text-center">@@Model.LoanPayment.ToString("C")&lt;/h3>
                                                    &lt;/div>
                                                &lt;/div>
                                                &lt;div class="col-12 gx-5 mt-5">
                                                    &lt;div class="row">
                                                        &lt;div class="col-6">Total Principal: &lt;/div>
                                                        &lt;div id="csTotalPrincipal" class="col-6 text-end">@@Model.LoanAmount.ToString("C") &lt;/div>
                                                    &lt;/div>
                                                    &lt;div class="row">
                                                        &lt;div class="col-6">Total Interest: &lt;/div>
                                                        &lt;div id="csTotalInterest" class="col-6 text-end">@@Model.TotalInterest.ToString("C") &lt;/div>
                                                    &lt;/div>
                                                    &lt;div class="row">
                                                        &lt;div class="col-6">Total Cost: &lt;/div>
                                                        &lt;div id="csTotalCost" class="col-6 text-end">@@Model.TotalCost.ToString("C") &lt;/div>
                                                    &lt;/div>
                                                &lt;/div>
                                            &lt;/div>
                                        &lt;/div>
                                    &lt;/form>
                                    &lt;div class="row mt-5">
                                        &lt;div class="col-12 table-responsive g-0">
                                            &lt;table class="table table-bordered table-striped table-sm">
                                                &lt;thead class="fw-bold">
                                                    &lt;tr>
                                                        &lt;td>Month&lt;/td>
                                                        &lt;td class="text-end">Payment&lt;/td>
                                                        &lt;td class="text-end">Principal&lt;/td>
                                                        &lt;td class="text-end">Interest&lt;/td>
                                                        &lt;td class="text-end">Total Interest&lt;/td>
                                                        &lt;td class="text-end">Balance&lt;/td>
                                                    &lt;/tr>
                                                &lt;/thead>
                                                &lt;tbody id="csResults">
                                                    @@foreach (var item in Model.LoanPayments)
                                                    {
                                                        &lt;tr>
                                                            &lt;td>@@item.Month&lt;/td>
                                                            &lt;td class="text-end">@@item.Payment.ToString("C")&lt;/td>
                                                            &lt;td class="text-end">@@item.MonthlyPrincipal.ToString("C")&lt;/td>
                                                            &lt;td class="text-end">@@item.MonthlyInterest.ToString("C")&lt;/td>
                                                            &lt;td class="text-end">@@item.TotalInterest.ToString("C")&lt;/td>
                                                            &lt;td class="text-end">@@item.Balance.ToString("C")&lt;/td>
                                                        &lt;/tr>
                                                    }
                                                &lt;/tbody>
                                            &lt;/table>
                                        &lt;/div>
                                    &lt;/div>
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>App view</h5>
                                <p>
                                    The App view contains the form and table structure we'll use to display the payment schedule.
                                </p>
                                <p>
                                    It takes in the LoanAmount, LoanTerm and LoanInterest (rate) from the user. It has standard values, but the user can replace these if they want.
                                </p>
                                <p>
                                    In the form header section we display the immediately critical information about the loan. This is the monthly payment, the total principal (that is the loan amount before interest), the total interest payed and finally the total cost of the loan.
                                </p>
                                <p>
                                    In the table we simply display the term (month) from 1 through the end of the chosen length of terms, 60 for our example, where each month is it's own row.
                                </p>
                                <p>
                                    The remaining columns from left to right hold the monthly payment (which should be the same until the end), the monthly principal (the amount of the payment which goes toward the loan amount), the monthly interest amount, the total interest amount so far and finally, the remaining balance of the loan.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemEight" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelEight"
                            aria-expanded="true"
                            aria-controls="accordionPanelEight"
                            class="accordion-button bg-primary text-light">
                        Loan model
                    </button>
                </h3>
                <div id="accordionPanelEight" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    public class LoanModel
                                    {
                                        public decimal LoanAmount { get; set; }
                                        public decimal LoanInterest { get; set; }
                                        public int LoanTerm { get; set; }
                                        public decimal LoanPayment { get; set; }
                                        public decimal TotalInterest { get; set; }
                                        public decimal TotalCost { get; set; }

                                        public List&lt;LoanPaymentModel> LoanPayments { get; set; } = new();
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>Loan model</h5>
                                <p>
                                    The LoanModel holds the 6 properties we need to do our calculations, as well as a properties that is defined as a list of the LoanPaymentModel, which will hold the payment schedule.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="accordionItemNine" class="accordion mt-1">
            <div class="accordion-item bg-secondary-subtle">
                <h3 class="accordion-header">
                    <button type="button"
                            data-bs-toggle="collapse"
                            data-bs-target="#accordionPanelNine"
                            aria-expanded="true"
                            aria-controls="accordionPanelNine"
                            class="accordion-button bg-primary text-light">
                        LoanPayment model
                    </button>
                </h3>
                <div id="accordionPanelNine" class="accordion-collapse collapse">
                    <div class="accordion-body">
                        <div class="row row-cols-1 row-cols-md-2">
                            <div class="col col-md-8">
                                <pre data-start="5"><code class="language-dotnet">
                                    public class LoanPaymentModel
                                    {
                                        public int Month { get; set; }
                                        [DisplayFormat(DataFormatString = "{0:C0}", ApplyFormatInEditMode = true)]
                                        public decimal Payment { get; set; }
                                        [DisplayFormat(DataFormatString = "{0:C0}")]
                                        public decimal MonthlyPrincipal { get; set; }
                                        public decimal MonthlyInterest { get; set; }
                                        public decimal TotalInterest { get; set; }
                                        public decimal Balance { get; set; }
                                    }
                                </code></pre>
                            </div>
                            <div class="col col-md-4">
                                <h5>LoanPayment model</h5>
                                <p>
                                    The LoanPaymentModel holds the 6 properties we need in order to generate the payment schedule.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>